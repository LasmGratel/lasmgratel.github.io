<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lasm Gratel&#39;s Blog</title>
  
  
  <link href="https://lasmgratel.github.io/atom.xml" rel="self"/>
  
  <link href="https://lasmgratel.github.io/"/>
  <updated>2022-11-17T09:53:00.049Z</updated>
  <id>https://lasmgratel.github.io/</id>
  
  <author>
    <name>Lasm Gratel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022-11-17 杂谈</title>
    <link href="https://lasmgratel.github.io/2022/11/17/2022-11-17/"/>
    <id>https://lasmgratel.github.io/2022/11/17/2022-11-17/</id>
    <published>2022-11-17T08:52:23.000Z</published>
    <updated>2022-11-17T09:53:00.049Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><em>好吧，V.K 克的钢琴曲确实很好听。</em></p><h1 id="关于友谊，互惠与私欲"><a href="#关于友谊，互惠与私欲" class="headerlink" title="关于友谊，互惠与私欲"></a>关于友谊，互惠与私欲</h1><h2 id="自爱与诚实精神（Honnetete）"><a href="#自爱与诚实精神（Honnetete）" class="headerlink" title="自爱与诚实精神（Honnêteté）"></a>自爱与诚实精神（Honnêteté）</h2><p>人的内心世界无比复杂，不能用简单的词语来概括人的理性和欲望。柏森格的直觉主义——生命绵延论可能会让我们眼前一亮：</p><blockquote><p>亨利·柏格森的哲学主张“绵延”(durée) 观念，即变迁的实在。他认为不只事物的性质会变迁 (蓝色的事物变成红色，年轻的事物变老)，生命本身的物质也会变迁；此外，他也认为概念是静态与片面的。当我们试着分析事物时，就扭曲并改变了事物；采取某一个观点，放弃另一个观点；冻结事物的时间却未能理解事物的发展，即事物的“生命”。<strong>分析必然无法令人满意，因为事物存在着无限的角度与无尽的片刻。</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="<https://zh.wikipedia.org/wiki/%E4%BA%A8%E5%88%A9%C2%B7%E6%9F%8F%E6%A0%BC%E6%A3%AE>.">[1]</span></a></sup></p></blockquote><p>人们的表面想法是一回事，而实际想到了什么却是另一回事。我不再是我，而是别的东西，比如是另一个我。当你试图分析人是美的还是邪恶的时候，你会失败，因为人这个时候可能已经改变。</p><p><em>“我”就像泥鳅一样难以捉摸。</em></p><blockquote><p>The love of oneself and of all things for the self; it makes men idolators of themselves and tyrants of others. – Maximes (563)</p></blockquote><p>但我们的欲望就不是美德吗？我们为了获得“忠诚”“慷慨”“绅士”的评价的目的可能是不纯的，但这些动机所引发的被我们称为美德的行为就是虚假的吗？</p><p>假设人性中有永恒的目标，我们有了这样的世界观，那么我们自然要趋向于寻找<em>共同的利益</em>，人与人，民族与民族，企业与企业，国家与国家都需要联合起来。<strong>联合起来追求某种利益，这难道不是<em>邪恶</em>的吗？我们追求了共同的美德，这反而成为了一种邪恶。</strong></p><p>所以这样的假设是错误的。“永恒的目标”是一种动机，而不是我们想要的某种效果。而且就动机而言也只是一个模糊的大方向。</p><p>人们只是在“想要”某个东西的问题上具有模糊的一致性，但是人的本性往往是见异思迁的，于是追求那些表面上与自己一点儿关系都没有的事情，并且以此作为最大的快乐。</p><p>当人们把某种娱乐，比如下棋，或者是电子游戏，当成了一种终身为“赢”的职业或者异化了娱乐的本意导致一种所谓的个人利益追求（我在从游戏中追求什么，而不是在享受这个过程）时，人是多么的愚蠢啊！</p><p>如果人人都绝对不惜一切代价以满足自己的私欲，我们的社会是难以存在的。（况且，没有社会你哪来的私欲）</p><p>于是最早的友谊就出场了：这是一种“没有关系的关系”。在这里，人们以别人的快乐作为自己的快乐。——或者说人们的本意是为自己快乐，但是为此得先让别人快乐。</p><p>在友谊中这两种快乐是难以区分的。<strong>快乐就在于有相异的东西可以交换，</strong> 就像男女之间的爱情。<strong>如果人们都有同样的兴趣，或者只有同样的精神世界，或者只说一种语言，那对人类来说，将是一件多么值得悲哀的事啊！</strong></p><p>共同社会要强调私人性，由各种个性的人组成的社会才真正具有活力。(这也是我们需要制约强制力量，追求自由的缘由之一)</p><p>社会要服从无数个别的意志，而不是个人无条件地在服从某个少数人或某个少数人组成的集团的意志。</p><p><strong>保持相互的幻觉是生活下去的积极因素，巨大而广泛的不透明性是人类获取幸福生活的灵感源泉。</strong></p><p>人在潜意识中讨厌自己而喜欢对方，因为他人有自己永远不会拥有的东西，你只能欣赏他而不能拥有他（即使你们成为了伴侣），人又不由自主的想成为他人。（所以人都是爱而不得的吗？）（所以人都活在追求他人的路上。）</p><p>妮科尔《论道德》：人类生活是一种可怕的伪装，人都只是把美丽、和谐、快乐的外表显示给别人，但是真实的情形却很凄惨，恶魔缠身。每个人都是一个小小的王国，固守着自己的疆土，渴望被别人赞扬。</p><p>认识和把握自己的首要障碍，就在于人的掩饰本能。我们想让别人相信的不是我们的真实本性，我们想要却显得似乎不想要，我们不是表面上我们所“是”的人。</p><p>通过掩饰我们的欲望来显得很关心他人的需要而不是支配他人，反而更容易达到自私的快乐目的。通过满足他人的需要来满足自己的需要，这也是人类商业活动的最基本准则。（投资，吸血，blabla）</p><p>人们在这种利益交换中反而实现了道德，实现了现代社会。</p><p>（所以后现代会“看破”你们这些虚伪的交换，然后说你们都是不道德的。其实我觉得，这种看破是没有意义的：没有人会在大街上裸体走来走去。）</p><blockquote><p>We find, for example, almost everywhere when we are traveling, men who are ready to serve those who pass and have lodgings ready to receive them. We dispose of their services as we wish; we com­mand them and they obey us and make us believe that it gives thempleasure to serve us. They never excuse themselves from rendering any service demanded of them. How could such behavior be more admirable if it were animated by the spirit of charity itself? It is greed which makes them act, and they do so with such good grace that one believes one does them a favor by employing their services. Think how much charity would be required to build a whole house for another man, to furnish it completely and then hand him the key. Greed does this quite joyfully. What a degree of charity would be needed to go search for medicines in the Indies, or abase oneself to the vilest services, and the most painful? Greed does all this with­out complaining. <sup id="fnref:2"><a href="#fn:2" rel="footnote">&lt;span class=”hint–top hint–error hint–medium hint–rounded hint–bounce” aria-label=””De la grandeur,” Jourdain, p. 398.<br>“&gt;[2]</span></a></sup></p></blockquote><p>我们为了自己的私欲却为他人提供了方便，这可能就是一种友谊的善吧。那么为了释放这种善，可能就需要某种“自发的公民秩序”（civil order），来压制贪欲，构建合理的社会秩序。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/wiki/%E4%BA%A8%E5%88%A9%C2%B7%E6%9F%8F%E6%A0%BC%E6%A3%AE">https://zh.wikipedia.org/wiki/亨利·柏格森</a>.<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">&quot;De la grandeur,&quot; Jourdain, p. 398.<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;em&gt;好吧，V.K 克的钢琴曲确实很好听。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    
    <category term="philosophy" scheme="https://lasmgratel.github.io/tags/philosophy/"/>
    
  </entry>
  
  <entry>
    <title>2022-11-15 杂谈</title>
    <link href="https://lasmgratel.github.io/2022/11/15/2022-11-15/"/>
    <id>https://lasmgratel.github.io/2022/11/15/2022-11-15/</id>
    <published>2022-11-15T07:51:43.000Z</published>
    <updated>2022-11-17T08:51:57.428Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="人文主义，社会与权利学说"><a href="#人文主义，社会与权利学说" class="headerlink" title="人文主义，社会与权利学说"></a>人文主义，社会与权利学说</h1><p><em>这一篇将主要涉及对法国哲学的反思，类似一种评论文学，如果排版不太舒服的话请反馈。</em></p><blockquote><p>追逐个人利益的理论设想人都是自爱的，爱自己。人与其他人的关系被说成是为了达到更好的爱自己的手段或者桥梁。人与其他人之间不仅是道德关系，同时也是服从与支配关系，是权力关系或政治关系。</p></blockquote><p>实际上这里涉及到了我们的一种前向认为，我觉得这里可以类比一句话：人是社会关系的总和。</p><h2 id="关于人的本性与第二天性"><a href="#关于人的本性与第二天性" class="headerlink" title="关于人的本性与第二天性"></a>关于人的本性与第二天性</h2><blockquote><p>蒙田之前的人文主义者相信人类的善良本性，认为美德在一切时代和一切场合下都是一样的。个人的幸福有赖于整个人类的幸福。</p></blockquote><blockquote><p>拉博埃西：所有人的本性都是自由度，但是他们却怎么臣服于一个独立的人呢？臣服于一个除了人民赋予他的权力之外再无权力的人呢？难道这不是自相矛盾的吗？</p></blockquote><p><strong>如果人生来是自由的，为什么却到处充满奴役？</strong></p><p>这里的问题在于：假设人类有这样的善良本性——向往自由，那么理所当然会反抗这种奴役/这种奴役就不该存在。</p><blockquote><p>卢梭，蒙田都认为：人一开始就受制于外力，这种被束缚的情形成为了习惯，从这个意义上也可以说人生来都不自由，习惯对我们的压制甚至强于大自然对我们的强制力量。</p></blockquote><p>我们从出生开始就受到了社会的规训。比如我说自由平等博爱，这种想法是来源于人类的本能/本性，还是几千年的兄弟会，基督教带来的规训？</p><p>自由究竟是人类的本能还是我们被后天赋予的使命？</p><blockquote><p>习惯并不是天生就有的。但是习惯一旦养成就会成为我们的第二天性。</p></blockquote><p>如果你把天性的定义改为，你在之前是 A，某一刻你养成了某个习惯，成为了 B，那么 B 的天性就是某个习惯。所以我有点不太认同这里使用的“天性”这个语词。</p><blockquote><p>最可贵的是能克服习惯，保持我们性灵的天真状态，这唯有尽可能保持与世隔绝状态才能做到。最可贵的东西同时也是最脆弱的东西，随之可见的则是大量的庸俗。</p></blockquote><blockquote><p>如果一个人习惯了做什么，这件事对他来说就是自然的，同时他就会对原来简单天真率直的本性无动于衷。</p></blockquote><p>这是一种法国人的天性/文化本性（我依然不认可这里经常使用的“天性”一词）。人类的天性既是追求自由，又是折弯与顺从。</p><blockquote><p>拉博埃西：顺从别人的意志简直就是罪恶，各种统治者的习惯伎俩就是“使人民长睡不醒”，不知道事情的真相。</p></blockquote><p>人们的自由天性在习惯性的屈服与顺从之下消失了，人们忘记了追求自由的天性，而这种忘记是一种深刻的压制。</p><p><strong>为了回到我们的天真状态，我们需要私人生活，私人时间才能保证我们的精神自由。</strong></p><h2 id="蒙田"><a href="#蒙田" class="headerlink" title="蒙田"></a>蒙田</h2><blockquote><p>蒙田认为，“个人”是中心，个人之外的一切社会责任都是从对个人的责任中演变出来的，拐弯抹角都是为了个人的尊严。蒙田告诉我们，为了享福，回到自己的内心世界是必要的。</p></blockquote><p>有点像我前几天看的《我们时代的神经症人格》中产生的焦虑，这种焦虑会把内心需求外推，会习惯性的向别人付出，爱别人，以此来填补自己内心的空虚。</p><blockquote><p>一个人过多时间独处，就会觉得空虚、了无意义，因此人最容易被身外之事诱惑。</p></blockquote><p>人回到自己或向自己的时候，往往是不快活的，内心全身空虚甚至凄惨。为了使我们不沮丧，自然之母赋予人类另外一个天性，这就是让自己的心思沉溺与身外的事物以至于忘记了自己的存在。</p><p><strong>人最不了解的就是他自己。</strong></p><p>苏格拉底提出的任务是：认识你自己。人们为了完成这个任务，就会开始寻找别人的帮助。蒙田的方法是：要回到你的内心世界，就要将内心的真实活动告诉世人。</p><p>但是这种活动绝不同于庸俗的“公共政治生活”。蒙田发现，人们会进行“消遣”（divertissement）活动，以回避思考自身。</p><p>在消遣活动中，我们总是关注那些不是我们自己内心世界本来面目的外部事物。人们总是环顾左右，或参与其中、或看客心理、看社会新闻、看别人打架。“知道自己”反倒是一件困难的事。</p><p><strong>人类在自己的文明中走得太远了，再也不能返回朴实的自然状态。</strong></p><p>人们往往以狭隘的眼光，认为自己熟悉的做事方式就是自然的，而自己陌生的举止就是不自然的。</p><p>蒙田想让人们从这样的偏见中解脱出来，有很多不一样的“自然”，人需要去探索，去旅行，去刺激自己的好奇心，通过这些方式扩大自己的眼界和心胸。</p><p>真正重要的、具有创造性快乐的事情、真正值得过的生活，都具有私人性质。</p><p><strong>我们要在“长期下跪”的情况下，还要保持精神的独立性。</strong> 以追求“不可能的精神”当作自己的人生消遣，从大多数人认为同样的事情中看出差别。</p><h2 id="帕斯卡尔"><a href="#帕斯卡尔" class="headerlink" title="帕斯卡尔"></a>帕斯卡尔</h2><p>帕斯卡尔认为促使人所有活动的源泉有两个：欲望和强力。</p><blockquote><p>世界的女皇是强力而不是见解——但是见解却是使用权力的东西——正是强力制造见解。在我们看来，软弱总被人欺。为什么呢？因为软弱的人就像一个在绳索上单独跳舞的人，这时候，一个有强力的人就会过来对他说，你这舞跳得不对。这种强力的语言其实不过是个阴谋……使我们当中的一些人尊重另外一些人的绳索（“绳索”即权力——引注）通常是一种必然性的绳索，它把人区分为等级，一切人都希望支配别人，但只有某些人实现了这个愿望……权力形式本身是如何发生的呢？这些形式相互斗争，直到更有力量的一方战胜了相对软弱的一方。于是一个统治集团就这样建立起来了。在这个时候，握有权力的人就不想斗下去了，它们想稳定秩序，以便使权力按照他们高兴的方式传下去。有的想让人民的选票决定权力如何传下去；有的则是世袭，等等。就是在这里，想象开始发挥作用了，因为直到这点为止，一直是强力逼迫现实，现在起作用的，则是某种组织的想象力，无论是法国的还是瑞士的……这些把尊重贴到这个或者那个特殊人物身上的绳索，只是想象的绳索，来自想象的力量……依据见解而建立的统治，有时是想象出来的规则，这个帝国是甜蜜的、遂人心愿的。强力的统治一向如此，永远如此。见解就像世界的女皇，强力则是见解的暴君。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Nannerl O Keohane, _Philosophy and the state in France_, Princeton University Press, 1980, p258.">[1]</span></a></sup></p></blockquote><p>国王使用军队并不想赢得人民的尊重，而是让人民恐惧，因为全部问题恰恰在于：<strong>来自权力的判断，就被当成来自真理的判断。</strong></p><p>这就是我们现代控制社会的问题根源，我们把判断的尊严交给了强制力量，我们屈服于刀枪，规则，以及社会运行的所谓普遍规律。</p><p>帕斯卡尔认为，判断的尊严应该服从于“沉思的强力”，它根植于最基本的人性需要、人心的动机。我们想要解决无休无止的争吵，所以我们依靠权力。</p><p>而这种政治的决定通常是荒谬的、不讲道理的，显示出人类选择能力的低下。</p><p>只能有一个标准，因为“见解”比不上强权，所以这个“真理性”的“见解标准”最好由强权来领衔（注：由强权决定什么是真理），因为它能在最大限度上避免由于无休止的争吵而导致的不稳定危机。</p><p><strong>由于权力说的一切永远是对的，因此，有了权力就有了一切，丧失权力就丧失了一切。</strong></p><blockquote><p><strong>我们为什么要跟随多数人的决定呢？是因为他们是正确的吗？否！只是因为它们更有权势。</strong></p></blockquote><p>帕斯卡尔是悲观的，他认为我们只能服从于强权，才能保证自己私人的时间和空间来从事自己喜欢的个人爱好。</p><p>但这种服从是一种口服心不服：<strong>权力和掌握权力的事情其实是非常卑微的、不值得尊重的、不重要的。重要的是游戏的生命态度，而不是严肃的政治原则。</strong></p><blockquote><p>当疯狂被认为正常时，合理的正常就是大逆不道的。</p></blockquote><p><strong>帕斯卡尔把柏拉图的《法律篇》和亚里士多德的《政治学》这些“政治哲学”著作，比喻为“为疯人院制定规则”。</strong> <del>（PS：我在这里停下来笑了一分钟）</del></p><p>我们阅读这些书感到津津有味，是因为我们心中本来有一种愚蠢的权力欲望——这些书本来是写给“国王们”看的，我们阅读，就像是真的国王一样 <del>（PS：这不就中国史书）</del></p><p><em>更可笑的是，</em> 这些书的内容是让这些 <em>本来就疯</em> 的国王不疯的。</p><p>而正因为政治的可笑和荒谬，所以帕斯卡尔认为人类不能建立更好的政治秩序。人类没有能力去设计一个更好的政治秩序 <del>（想想苏联！）</del> 这是对人类“普遍的正义”的深刻怀疑。“共同的意见”一定会变得抽象，越是“共同”，越是抽象，越没有实用价值。</p><p><strong>任何情况下，正义都是由背后的强力决定的（做出解释的）。</strong></p><p>人的支配他人的本性是如本性此强大，以至于我们绝对不要指望通过祈祷公正来改变这种本性。</p><blockquote><p>从小孩子哭喊着喊“那只猫是我的”，我们就能“开始窥见到篡夺整个地球的影子”。</p></blockquote><p>于是，人生来就学会了把自己的真实面孔隐藏起来。（你的真实面孔就是支配他人！从政治权力到爱情。）</p><p>于是，一切社会的规则都具有虚假性。为了避免与他人同归于尽，人必须对自己“恶”的本性加以遏制。社会的规则或理性终究不能战胜人的任性，以至于人类历史总要在纠正由于人的任性带来的灾难过程中循环往复。</p><p><strong>事实上我们不可能认识我们自己，这甚至是人活着的最大乐趣之一。</strong></p><p>帕斯卡尔强调，人的根本动机是获得幸福。但这可能也只是社会强加给我们的心理习惯，而没有了这种心理习惯，人生将变得更加芬芳动人。<strong>可能还有一个更深刻的问题，即无动机的动机、精神或举止活动的散漫状态、不刻苦努力或只沉醉于无动机的动机或游戏状态，或许是幸福的更美好状态。</strong></p><p>大概，更美好的幸福是无动机的生活。</p><p>我们会很快厌烦自己得到的东西。我们的一生活得极不真实，不仅自己欺骗自己，而且人之间互相欺骗。</p><p><strong>我们异化，我们消遣，我们不满足于自己已有的生活，要过一个存在于别人头脑里想象的生活，我们迫使自己显得不是本真的自己，以满足他人对自己的想象。我们成为了非我。</strong></p><p>人类的天性就是不严肃的，所有的严肃都是为了避免过分的不严肃产生的恶果。</p><p>由于对痛苦的记忆是导致不快活的重要源泉，回避或“丧失”记忆反而成了幸福的一个前提。换句话说，“原因”总是模糊不清的。</p><p>（你为什么不幸福？你不知道，因为你把这些记忆 <em>屏蔽</em> 了。）</p><blockquote><p>卢梭对手淫本性的分析：由于手淫既是在想象中享受美人（非我），又严重损耗身体，所以卢梭说那导致他陶醉的就是摧残他的东西。</p></blockquote><p>最厉害的人，应该能随时唤醒异样的兴趣，能在最短的时间内改变原来的习惯，转换的速度越快，不仅他的能力越大，他的生活质量也就越高。（看看之前说的对习惯的剖析，有没有想到什么！习惯成为了你的强制力，你只是在麻木的活着。）</p><blockquote><p>要想让一个人绝望，就是使他再没有念想。</p></blockquote><p>兴趣、欲望、消遣，这些都是同义词，它们的害处是麻痹我们，是我们忘记关于人本身的“真理”——<strong>但如果这个“真理”就是消遣呢？</strong></p><p>美德是自爱的装饰。</p><p>政治机构不过是一个能最大限度地满足更多人欲望的分配委员会罢了。</p><p>人是“精神分裂型”的，集美德与邪恶与一身，既伟大又渺小。</p><h2 id="自爱与诚实精神"><a href="#自爱与诚实精神" class="headerlink" title="自爱与诚实精神"></a>自爱与诚实精神</h2><blockquote><p><em>诚实的面对自己的本心。</em></p></blockquote><p>梅里认为，社会需要一种不同于宗教，残暴专制制度的信仰，要对抗人心的腐败。</p><p><strong>趣味、快乐、消遣才是神圣的，它们本身就意味着拯救。</strong></p><p>这种气质是精神上的，而不是物质上的奢华腐败。</p><p>（网络新梗，鬼畜，是趣味的、快乐的、消遣的。所以大家更喜欢它们，而不喜欢说教。）这便是自爱。</p><p>拉罗斯富科：重要的是逃避被别人支配，而不是支配别人。人本身的神秘或不可思议之处是一种生动的神秘性，浸透着热情和欲望。“我”是人身上最强大的动力。</p><h2 id="挖个坑"><a href="#挖个坑" class="headerlink" title="挖个坑"></a>挖个坑</h2><p>下次可能讲法国哲学家眼中的友谊与两性交往。</p><p>下下次讲卢梭。（图书馆一周没交付我的借阅请求了急死了）</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>其他引用懒得找了。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Nannerl O Keohane, <em>Philosophy and the state in France</em>, Princeton University Press, 1980, p258.<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;人文主义，社会与权利学说&quot;&gt;&lt;a href=&quot;#人文主义，社会与权</summary>
      
    
    
    
    
    <category term="philosophy" scheme="https://lasmgratel.github.io/tags/philosophy/"/>
    
  </entry>
  
  <entry>
    <title>2022-10-18 杂谈</title>
    <link href="https://lasmgratel.github.io/2022/10/18/2022-10-18/"/>
    <id>https://lasmgratel.github.io/2022/10/18/2022-10-18/</id>
    <published>2022-10-18T13:38:20.000Z</published>
    <updated>2022-11-17T09:56:27.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="关于-AI-绘画"><a href="#关于-AI-绘画" class="headerlink" title="关于 AI 绘画"></a>关于 AI 绘画</h1><blockquote><p>一幅图画囚禁了我们。我们逃不脱它，因为它在我们的语言之中，而语言似乎不断向我们重复它。—《哲学研究》115 节，维特根斯坦。</p></blockquote><p>可以先看一篇知乎回答：<a href="https://www.zhihu.com/answer/2716507220">https://www.zhihu.com/answer/2716507220</a></p><p>我的想法：NovelAI 揭露了人们之前一直掩盖的一个事实：<em>二次元绘画</em>是<em>二次元人设</em>的<strong>堆砌</strong>。</p><p>在 AI 绘画中，这很容易证明：我们使用一堆 tag 作为这个符号系统的输入，输出的是一张图片，其中严格包含了这些 tag。这当然是没有意义的符号组合，只不过我们对着这张图构建了一个意义，然后声称这是 AI 艺术。</p><h2 id="前-AI-时代的二次元绘画"><a href="#前-AI-时代的二次元绘画" class="headerlink" title="前 AI 时代的二次元绘画"></a>前 AI 时代的二次元绘画</h2><p>我们以前都认为，二次元绘画<em>都</em>是艺术 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="参考知乎的讨论 <https://www.zhihu.com/question/398151502>">[1]</span></a></sup>。实际上绘画要分成两块：工业生产的有目的性的画作，以及艺术性的创作。这种分类并不是对立的，我们用番剧来举例：番剧中的关键帧都是工业生产的画作，但连贯起来却具有了一种艺术性。</p><p>对于二次元（这里其实应该专指萌系画风）来说，一部商业作品的成功需要做市场调研，调查受众的口味。在这个过程中我们标签化了角色，我们分成了无数种<a href="https://zh.moegirl.org.cn/%E8%90%8C%E5%B1%9E%E6%80%A7">萌属性</a>。这样的商业作品，显然是工业生产的批量画作。</p><p>画师要做的是把人们心目中的某种描述性的（descriptive）图景，语言化为的标签的图景，具象化，变成我们可以看到的画作。</p><h2 id="标签化的错误在哪里？"><a href="#标签化的错误在哪里？" class="headerlink" title="标签化的错误在哪里？"></a>标签化的错误在哪里？</h2><p>首先谈谈这些标签：缺乏所指定义的符号，类似在光学出现<strong>之前</strong>我们对于“红色”的定义。这些标签都不是纯概念上的，都内涵了一种叙事，我们构建了一个符号然后把这个符号安在某个角色身上。</p><p>我们给出的某种标签的定义，是基于前人的某个具体的图景抽象出来的，那么之后要画出这种标签的人物就必须依赖之前的某种图景。</p><p>因此，就不难理解一种观点：我能看出这个角色身上有某些角色的影子。</p><p>而当我们去把这些较强的标签（像 XXX 一样的）转化成较弱的，一个公共叙事上的，概念性的标签，问题又出现了：这些标签若不是依托于某些角色而存在的，那么就是空洞无物的。我们的具象化过程是不可能进行的。</p><p>我说人物 A 像明日香，所以人物 A 是傲娇；人物 B 像明日香，所以人物 B 是傲娇；</p><p>但我们能说人物 C（死了母亲）像明日香，然后说人物 C 是傲娇吗？</p><p>我们应当直接叙事而不是使用 tag 来构造图片。什么是标签，什么是叙事？傲娇是标签，嘴巴上扬气鼓鼓这是叙事，后者可以让你看出傲娇这个属性。</p><p>这里很有文学的影子！在文学中我们就不是直接设定一个人物，而是通过各种描写来丰满一个人物形象。</p><p>不知道读者有没有思考过“按标签分类”这个想法。例如你想给自己收藏的沙雕表情包打上标签然后分类，你会发现这玩意简直没法使用：一些图片既符合一个标签，又符合另一个标签，而我们想要的却是<strong>查询某一个叙事</strong>的图片！</p><h3 id="AI-中发生了什么？"><a href="#AI-中发生了什么？" class="headerlink" title="AI 中发生了什么？"></a>AI 中发生了什么？</h3><p>属性、标签、叙事，和某个具体人物，它们之间都不具有强关联性。当我们给出一个“属性”标签时，AI 会挑选带有该属性的人物进行缝合。因为我们的标签化过程是如此的，于是 AI 进行了一个反过程。</p><p>因为标签没有所指，AI 当然也不能自己理解出/创造标签的所指，因此 AI 并不能<em>理解</em>这个标签。我们可以说，AI 是一个标签集合内的猴子打字机。</p><blockquote><p>目前 AI 绘画的特点是：想要得到非常特定的图有困难，但无心插柳往往能得到意外惊喜的图。就像是 AI 绘画的作图者们自称的，像是“抽卡”一样的体验。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="知乎用户玖瑶的回答 <https://www.zhihu.com/question/558019952/answer/2719392098>">[2]</span></a></sup></p></blockquote><p>但是，当你给定的限定范围越多，猴子打字机输出的结果当然越准确：<strong>如果你准确描述了蒙娜丽莎，你当然只能画出蒙娜丽莎！</strong></p><p>实际上也是，我们对 AI 的图片标签输入越来越<strong>叙事化</strong>。我们甚至开始使用嵌套的标签，而嵌套的标签就是迈向类型系统的关键一步。既然类型系统是图灵完备的，那么我们这样一种与 AI 交流的语言当然也是图灵完备的。</p><p>实际上根据日常语言分析学派来说，这些标签就应当被引导为日常语言中的运用，也因此在日常语言中才具有意义。</p><blockquote><p><strong>我们</strong>把语词从形而上学的用法重新带回到日常用法。—《哲学研究》116 节，维特根斯坦。</p></blockquote><p>所以可以得出结论：<strong>我们创造一个与 AI 交流的语言是重要的。</strong></p><h1 id="关于语言的退化"><a href="#关于语言的退化" class="headerlink" title="关于语言的退化"></a>关于语言的退化</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A：能看得见我说话吗？</span><br><span class="line">B：看不见</span><br><span class="line">C：看不见</span><br><span class="line">A：？？？</span><br></pre></td></tr></table></figure><p>我们可以换作如下句子来考虑。</p><p>(i) A：能看得见我说话吗？</p><p>(ii）B：这是真的，我看不见。</p><p>(iii) B：看得见你说话的这个命题为假。</p><p>(iv) B: 回应“能看得见我说话吗”这个问题时候，给出这是假的。</p><p>B 断言了某件事为假，然而 B 的回应行为蕴含了对 A 问题为真的回应。所以 B 给出的命题便被无效化了。那么我们应当说语言退化了吗？前言语的东西能否直接覆盖后面的言说？这里留给读者自行思考了。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">参考知乎的讨论 <a href="https://www.zhihu.com/question/398151502">https://www.zhihu.com/question/398151502</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">知乎用户玖瑶的回答 <a href="https://www.zhihu.com/question/558019952/answer/2719392098">https://www.zhihu.com/question/558019952/answer/2719392098</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;关于-AI-绘画&quot;&gt;&lt;a href=&quot;#关于-AI-绘画&quot; cla</summary>
      
    
    
    
    
    <category term="miscellaneous philosophy" scheme="https://lasmgratel.github.io/tags/miscellaneous-philosophy/"/>
    
  </entry>
  
  <entry>
    <title>2022-10-12 杂谈</title>
    <link href="https://lasmgratel.github.io/2022/10/12/2022-10-12/"/>
    <id>https://lasmgratel.github.io/2022/10/12/2022-10-12/</id>
    <published>2022-10-12T02:02:41.000Z</published>
    <updated>2022-11-17T09:50:40.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="关于“关于回归故事本身，回归事物本身，登楼撤梯，回归生活的总结”的批判"><a href="#关于“关于回归故事本身，回归事物本身，登楼撤梯，回归生活的总结”的批判" class="headerlink" title="关于“关于回归故事本身，回归事物本身，登楼撤梯，回归生活的总结”的批判"></a>关于“关于回归故事本身，回归事物本身，登楼撤梯，回归生活的总结”的批判</h1><p>原文章：<a href="https://www.bilibili.com/read/cv18993265">https://www.bilibili.com/read/cv18993265</a></p><h2 id="写在前面的一些废话"><a href="#写在前面的一些废话" class="headerlink" title="写在前面的一些废话"></a>写在前面的一些废话</h2><p>批判不是批评，批判也不是否定 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Peter A. Facione. _Critical Thinking: What is It and Why Does It Count._ California Academic Press, 1998: 1–16.">[1]</span></a></sup>。使用批判这个词语是指，茵夏文章中有和我想法相同的语句，有一些能转换成更严谨的哲学论述的论题，也有一些我并不认同的观点。晚上熬夜看完后睡不着觉，下定决心要写这样一段东西。说是批判，但其实可能很多东西也与原文无关了。</p><p>i. 作品中包含了 <em>深度</em> 元素。</p><p>ii. <em>深度元素</em> 即<code>对现实中的某些社会现状的分析展现或是抨击呼吁、对一些其他伟大的事物与感情的歌颂、对哲理性的承载、对人物成长救赎的描写，对某种脱离现实三观的刻画，对不可名状之物的表现。</code></p><p>对（i）和（ii）我们有如下结论：</p><p>iii. 包含深度元素的作品<strong>更加易于</strong>展现深度。</p><p>iv. 展现了深度的作品具有深度。</p><p>那么能否有另一种理解：</p><p>Liii. 不易于展现深度的作品不包含深度元素。</p><p>Liv. 没有展现深度的作品不具有深度。</p><p>我们能否有如下推论：</p><p>v. 为了使作品<strong>具有深度</strong>，我们必须添加深度元素。</p><p>我想这就是为什么“为了一碟醋包了一顿饺子”。实际上，大多作者是通过这样一种思考方式往作品里加戏的。</p><p>其实所谓的故事情节早就是设计好的，我认为，故事情节无外乎就是关键性的叙诡，通过日常语言的歧义性理解来达到设计一个诡计以欺骗读者的目的。</p><p>深度元素和 Hscene 在运用上并没有不同，实际上是迎合了读者的逻辑：即（iv），或评价网站的逻辑：（Liii）（Liv）。在此一点上，我们可以引入一个概念：剧情拔作。</p><h3 id="剧情拔作"><a href="#剧情拔作" class="headerlink" title="剧情拔作"></a>剧情拔作</h3><p>读者去寻找那些有相关情节/元素设定的作品，然后精神高潮。例如寻找黑残深，时间旅行，异世界，等等等等。<em>深度</em> 和上述名词包含在一个符号集合中，所谓的深度作品，也无非是这样一种符号，用来表示具有这些情节的作品。</p><p>我不好说哪些作品属于这个范畴，但这样的现象是存在的：为了冲击佳作榜而把各种元素缝一起，然后被捧为神作。</p><ul><li>我们应当认可一千个哈姆雷特，还是对作品的一个普遍感觉？</li><li>应该歧视/矮化拔作吗？</li><li>应该歧视/矮化玩拔作的玩家吗？</li></ul><p>下面我们展开讨论这个问题。</p><h2 id="私人语言论证"><a href="#私人语言论证" class="headerlink" title="私人语言论证"></a>私人语言论证</h2><p>维特根斯坦在《哲学研究》中给出了这样的结论：没有人可以有意义地使用一个纯粹私人性的语词。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="司各特·索姆斯。_20 世纪分析哲学史：意义的时代_。华夏出版社，2019: p51.">[2]</span></a></sup></p><p>这个结论是对使用“一千个读者心中有一千个哈姆雷特”来论证表达私人感觉的语词是正确的有力反驳。暂且不提莎士比亚并没有说过这句话 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="陈昌春。_“一千个人眼中就有一千个哈姆雷特”疑是中国人制造之山寨版英谚_。科学网，2014，[Wayback Machine](https://web.archive.org/web/20150314222825/http://blog.sciencenet.cn/blog-350729-847280.html)。">[3]</span></a></sup>，纯粹私人感觉的表达也是错误的。</p><p>你可以说：在我脑海中存在一种私人感觉。但你不能说：我用语词表达出了一种<em>纯粹</em>私人感觉。因为私人感觉借用了语词这个公共领域的载体。</p><p>我们接下来可以对这个观点进行批判了：</p><blockquote><p>上文描述的这个过程是一种读者与作品之间交互后自然而然的、被动产生的的效果，就仿佛一场前方风景未知的旅途，我们会不时的为那些击中我们心坎的”美景“而欢呼触动。但很多人在面对一部作品时，忘记了获得感触的过程是被动的，在进入故事之前便拿出了自己一些能感受到深度的预设，然后在故事中拼命寻找着那些刚好能“卡进自己卡扣”的点，仿佛拿着答案找寻试卷一般，即便是强行把答案填进去了，这个过程也不会是舒服的，主动的去寻求那些本应是被动的潜移默化感受到的东西大都不会有什么好结果。</p></blockquote><p>出现这种判断，更多源于表达上的问题。当我们需要去<strong>表达</strong>一种对故事的感觉时（这是一种私人感觉！），我们不得不去借用那些公共的语词，如哀伤的，吊诡的，王道的，等。我们进行了表达 - 理解的过程，这个过程中不可避免地，私人感觉会坍缩。对于看到这样的表达的理解者来说，就像是 _仿佛拿着答案找寻试卷一般_。我认为，这样的批评过于武断了。</p><h2 id="关于感性的认识故事"><a href="#关于感性的认识故事" class="headerlink" title="关于感性的认识故事"></a>关于感性的认识故事</h2><p>第二节 回归故事本身 中，茵夏提出要感性认识故事，实际上这和康德的观点不谋而合。作品故事也可以理解为一个牛顿时空观，这样的时空就是感性直观的纯形式的。我们可以认为，故事也是目的，而非手段，这同样与“不能通过故事表达其他的东西，回到故事本身”的观点不谋而合。</p><blockquote><p>如果没有感性，则对象不会被给予；如果没有知性，则对象不能被思考。没有内容的思想是空洞的；没有概念的直观是盲目的。（《纯粹理性批判》，A75/B51.）</p></blockquote><p>自我意识是知识的核心和出发点。套用到故事中，我看到水上由崎的立绘，天台抽烟，这些还不足以让我脑海中设立由崎的形象，只有当我看完整篇故事，并且<strong>意识到</strong>所有这些感性直观材料组成了一个“由崎”，它们才能成为自我意识的内容。</p><blockquote><p>“我思”必须可以伴随我的所有表象；因为如果不是这样的话，有些被表象的东西将不能被我所想，这等于说：表象不再可能，或至少可以说，表象与我无关。（《纯粹理性批判》，B131.）</p></blockquote><p>没有脱离感性认识的思想属性，更没有独立于意识活动之外的精神实体。故事之外并没有一个神，故事之外也并没有你的现实世界，因为在故事当中就是其本身，就是感性认识的组合体。我们的认知发展是感性-&gt;知性-&gt;理性，不能直接研究脱离了故事的幻象。有没有一双大手在搞校园暴力？有没有故事之外的灵魂？</p><p>这一点上我还想谈谈 meta 游戏：meta 游戏并没有脱离这个范畴。meta 游戏不会给你剧本之外的内容，一切仿佛是在和世界之外的“你”互动都是一种幻象，其本身仍然是故事脚本。如果你想到：故事世界之外都是怎样怎样的，我们人类之外有没有能让我通过 meta 能交互的上帝，这就没有思想附着了。</p><p>我其实是认为“理性之神”存在的，但并非是宗教中或是神话中的上帝。这种上帝是逻辑的反面，他给出结论，而我去论证。我们可以期待这样的上帝存在。</p><h1 id="关于循环论证与循环引用"><a href="#关于循环论证与循环引用" class="headerlink" title="关于循环论证与循环引用"></a>关于循环论证与循环引用</h1><p>懒得整理了，凑合看吧。</p><p>-&gt;（蕴含）这种逻辑关系就是有向边，&lt;-&gt;（等价）这种逻辑关系就是无向边。</p><p>循环论证当然可以看作循环引用。</p><h2 id="Substructural-type-system"><a href="#Substructural-type-system" class="headerlink" title="Substructural type system"></a>Substructural type system</h2><p>ordered 到不能说是不可判定的，类型系统能 ensure 的再广泛也无法包含所有运行时行为。除非你让你的类型系统变得非常严格，那样就起到反作用了，这语言写起来会很折磨，真正让这种分析变得 undecidable 的还是别名。</p><p>Q: 指针是不是别名？</p><p>A: yes, 大头就是指针</p><p>所谓类型系统确保安全性的方式就是让自己变得严格再严格，ordered type system 里你使用变量的顺序必须和定义的顺序一致而且最多只能用一次，affine system 里你最多只能用一次变量。</p><p>A: 所以 ordered type system 就是不允许引用的纯 ownership，所有权转移（参考 Rust）</p><p>substructural type system 就是把命题当做资源 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://en.wikipedia.org/wiki/Substructural_type_system">[4]</span></a></sup>，通过一种对资源的占用来保证使用的顺序。</p><p>dependent type system 把命题当做 proof 的</p><h2 id="关于人们是否愿意引入新的概念"><a href="#关于人们是否愿意引入新的概念" class="headerlink" title="关于人们是否愿意引入新的概念"></a>关于人们是否愿意引入新的概念</h2><p>我在想我们的认知是不是就默认的去归并，人类大脑特别喜欢归并问题，而非倾向于引入新的概念。所以德勒兹是个离经叛道的，拉康是个离经叛道的，等等。当我说拉康写的一坨屎的时候，其实是指拉康引入了一堆我没法判断是不是自指的概念。</p><p>人类的大脑不是 GC，没有办法清理这些自指概念。</p><p>DC：可计算理论里也有，就是讲如何把一个问题转化成另一个已知的问题的</p><p>如果一个问题能转化为另一个问题，那么你也能证明这一点，反之亦然</p><p>但你并不知道逻辑推演的结果！我们的论证是预设了一个结果然后进行建构式的推演（参见<a href="/2022/09/28/first-order-logic-a-semiotics-approach/">上一篇文章</a>），这样罗素式的论证就被推翻了。</p><p>这就很奇妙：在你推演之前你就已经知道结果了，那么推演的意义何在呢？</p><p>同理，（DC:）类型推导，他其实是个惰性的 typecheck，就他的正常流程和 typecheck 是一样的，只不过遇到他玩不明白的地方他就搞一个未知类型 X 塞上去。评价：这样的论证过程不也是罗素式的吗？名称只能指涉人们不可能对之出错的东西，比如私人性的感觉材料，或者人们直接亲知到的抽象对象。对早期维特根斯坦来说，这意味着名称必须指涉不生不灭的形而上学简单物，这些简单物不可能不存在。无论如何，包含日常名称的句子必须依据错综复杂的逻辑形式被加以分析，如果这些形式包含真正的逻辑专名，那么它们就被逐字翻译成是在谈论一个特定的逻辑上被显露出来的题材。</p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>下一篇文章可能会谈 AI 绘画吧。但其实我不太想写了，因为一堆人都写过了。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Peter A. Facione. <em>Critical Thinking: What is It and Why Does It Count.</em> California Academic Press, 1998: 1–16.<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">司各特·索姆斯。<em>20 世纪分析哲学史：意义的时代</em>。华夏出版社，2019: p51.<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">陈昌春。<em>“一千个人眼中就有一千个哈姆雷特”疑是中国人制造之山寨版英谚</em>。科学网，2014，<a href="https://web.archive.org/web/20150314222825/http://blog.sciencenet.cn/blog-350729-847280.html">Wayback Machine</a>。<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://en.wikipedia.org/wiki/Substructural_type_system<a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;关于“关于回归故事本身，回归事物本身，登楼撤梯，回归生活的总结”的</summary>
      
    
    
    
    
    <category term="miscellaneous philosophy" scheme="https://lasmgratel.github.io/tags/miscellaneous-philosophy/"/>
    
  </entry>
  
  <entry>
    <title>First order logic: A semiotics approach</title>
    <link href="https://lasmgratel.github.io/2022/09/28/first-order-logic-a-semiotics-approach/"/>
    <id>https://lasmgratel.github.io/2022/09/28/first-order-logic-a-semiotics-approach/</id>
    <published>2022-09-28T01:22:00.000Z</published>
    <updated>2022-11-17T09:50:25.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>构造逻辑的解释请移步：<a href="https://sora.ink/archives/1484">https://sora.ink/archives/1484</a></p><p>昨天早上仍然在思考哲学研究里的著名问题：如何定义一个游戏？维特根斯坦在《哲学研究》65-66 节给出了他的一个思考，我在这里先将部分内容和思考摘抄如下：</p><blockquote><p>这是真的。——不去给出为我们称为语言的所有东西所共同具有的某种东西，我说，根本不存在这样一种东西，它为所有这些现象所共同具有，并且因为它我们运用同一个词来称谓所有这些现象，——相反，它们彼此以多种不同的方式具有亲缘关系。因为这种<strong>亲缘关系</strong>，或者<strong>这些亲缘关系</strong>，我们将它们都称为语言。</p></blockquote><p>维氏首先反对了去给出 (定义或考察) 语言所指代的某物的共同特点，给出了他的 <em>语言是无数交织的亲缘关系的系统</em> 这样一个看法。</p><blockquote><p>请考察一下比如我们称为“游戏”的诸过程。我指的是棋类游戏，纸牌游戏，球类游戏，战争游戏，等等。什么是所有这些游 戏所共同具有的东西？——请不要说：“某种东西必定为它们所共同具有，否则它们就不叫做‘游戏’了”——而是查看一下是否有某种东西为它们都共同具有。——因为，当你查看它们时，你尽管看不到某种为它们都共同具有的东西，但是你将看到诸多相似性，诸多亲缘关系，而且是一大串相似性，亲缘关系。</p></blockquote><blockquote><p>我不能以比通过使用“家族相似性”这个词的方式更好的方式来刻画这些相似性；因为存在于一个家族的诸成员之间的那些不同的相似性就是以这样的方式交叠和交叉在一起的：身材，面部特征，眼睛的颜色，步态，气质，等等，等等。——而且我将说：诸“游戏”构成了一个家族。同样，比如数的种类同样构成了一个家族。为什么我们称某种东西为“数”？好的，这是因为它与人们迄今为止称为数的一些东西具有一种——直接的——亲缘关系；而且经由此，人们可以说，它便获得了一种与我们也如此称谓的其他东西的间接的亲缘关系。我们扩展我们的数概念的方式有如在纺制一根线时将纤维一根一根地往上拧一样。这根线的强度不在于任意一根纤维贯穿于其整个的长度，而是在于许多根纤维彼此交叠在一起。</p></blockquote><p>我们由此可以推论出重要观点：为了理解语言的一项独特的用法，人们必须按照它自身来对其进行检验，而不能实现假定它符合某种单一的，先入为主的价值观。</p><p>这是什么意思呢？我如果提出这个解释读者可能就能理解一半：<strong>前者 (按照它自身进行检验) 就是一种构造逻辑！</strong></p><p>语言所指代的某物，即为：无限论域上的量化。</p><h2 id="从符号论的角度来说"><a href="#从符号论的角度来说" class="headerlink" title="从符号论的角度来说"></a>从符号论的角度来说</h2><p>某个语词就是一<strong>种</strong>符号，某个语言所指代的某物可能是无数符号，因为某事物可以有无穷多个符号来反映它。这里的符号集合即为某论域<code>Q</code>。</p><p>那么我们反过来说：某论域<code>Q</code>（包含了所有符号，无穷多）互相连接而成是不是这个<em>事物</em>本身？不是，连接而成的只是上面维特根斯坦提到的一种<em>语言</em>。</p><h3 id="游戏的例子"><a href="#游戏的例子" class="headerlink" title="游戏的例子"></a>游戏的例子</h3><p>我们可以举个例子来反映这个推论过程，在这个例子中，你可以说：</p><ol><li>有射击系统的是游戏。</li><li>有玩家对弈机制的是游戏。</li><li>像 galgame 的是游戏。</li><li>基于 Half-Life 源代码开发的是游戏。<br>…</li></ol><p>但是，<strong>反过来说</strong>，你不能说 _游戏是有射击系统的，或有玩家对弈机制的，或像 galgame 的，或基于 Half-Life 源代码开发的，<strong>或具有其他特性的事物</strong>_！因为你无法对游戏这个拥有无穷多个特性的语词提出某种共性。</p><p>这里相当于一个符号系统：它接受无穷多个游戏特性作为输入，有一个游戏共性作为输出，我们利用 <code>我们不能把一个无限论域上的量化重写成连续的逻辑与或者逻辑或的形式</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://sora.ink/archives/1484">[1]</span></a></sup>，发现这样的符号系统是不存在的。（所以我们也当然无法使用公理验证或逻辑推理这样的符号系统！）</p><p>但是，我们仍然可以构造这样的逻辑，使得某物隶属于游戏。因为游戏是由无数关系交织而成的，那么我们可以利用和已经存在的游戏的关系构造新的游戏。<del>这有点类似于史莱姆大战女骑士，如果女骑士多长了一块肉，史莱姆需要延展过去来包裹这块肉，而不是女骑士去把史莱姆撑大。</del></p><p>我们可以构造这样一个逻辑：我有一个使用 ONS 脚本系统的程序，它接受可能的小说作为输入，galgame 作为输出，我们可以<strong>断言</strong>说，这个程序生产出来的东西都是 galgame，进一步的说，也都是游戏。为什么？正因我构造了一个生成与游戏相关联的逻辑（<strong>自限的！</strong>），我们便达到了维氏所说 <code>按照它自身来对其进行检验</code> 的目的。</p><h3 id="程序的例子"><a href="#程序的例子" class="headerlink" title="程序的例子"></a>程序的例子</h3><p>(群里讨论中得来) 假设我有三张图片：A.jpg，B.png，C.webp，我们很容易找到 jpg，png，webp 的共性，因为这三种图片格式和它们的构造过程都是<strong>有限</strong>的。我们可以基于这三种图片的共性，例如某种压缩算法，来设计一套系统，这个系统能够实现它们的所有共同功能。</p><p>这看起来很美好，不是吗？但如果我有无穷多种图片格式，又应当如何去做？我们无法找到无穷多个图片格式的共性，因为特点是无穷多个的，而前面我们说了，能找到这样共性的某种符号系统不存在。</p><p>于是我们构造了一种逻辑：因为我们的程序需要内存中最基础的位图数据，所以我们构造了一个图片容器：它接受所有的可以被反序列化为内存中位图数据的文件，并输出位图数据。通过这个容器的逻辑，我们可以称<em>可以被反序列化为内存中位图数据的文件</em>为一种<em>图片</em>。我们成功构造了图片的逻辑。</p><h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><p>直觉主义类型论的产生并没有离开维特根斯坦的分析哲学<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="_Intuitionistic Type Theory_, P Martin-Löf.">[2]</span></a></sup>，在最初罗素主义的观点中，一个看上去是名称的东西，实际在逻辑上并不像名称那样起作用。真正的名称必须有所指，这种所指的存在也必须得到担保。</p><p>对罗素来说名称就只能指代一个形而上学简单物，比如说某种抽象概念，这些简单物是不可能不存在的。所以包含日常名称的句子就必须通过逻辑形式分析成复杂的逻辑句。</p><p>《逻辑哲学论》中认为世间也有这种不生不灭的简单物<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="_Tractatus Logico-Philosophicus_, Wittgenstein., 2.02">[3]</span></a></sup>，这些简单物不可以进一步被描述，而只能以语言简单物来命名。当然这样的不可知论观点被视为一个明显的错误，并未获得广泛认可。</p><p>维特根斯坦后来也否认了这点，认为一个名称的所指不可能是其意义。在《哲学研究》第 39 节和第 40 节，他说：</p><blockquote><p>但是，为什么人们想到要使得恰恰这个词（“这个”）成为名称，而在这里它显然绝不是名称？——原因恰恰是这样的。因为人们试图针对通常叫做“名称”的东西提出一种反对意见；人们可以这样来表达这种反对意见：名称真正说来应当表示简单的东西。人们大概可以这样来为此提供根据：比如“诺统”这个词是一个通常意义上的专名。诺统这把剑是由处于特定的复合方式中的诸部分构成的。假定它们以不同的方式复合在一起，那么诺统便不存在了。但是，现在“诺统具有一个锋利的刃”这个命题显然具有意义，而不管诺统仍然是完整的，还是已经被粉碎了。但是，如果“诺统”是一个对象的名称，那么当诺统被粉碎了时便不再有这个对象了；因为这时没有任何对象对应于这个名称，因此它便不具有任何意义了。但是，这时在“诺统具有一个锋利的刃”这个命题中便出现了一个没有任何意义的语词，因此这个命题便是胡说。但是，它具有意义；因此，必定总是有某种东西对应着它借以构成的那些语词。因此，在对这个意义的分析中“诺统”这个词必定消失，代替它而出现的必定是命名简单的东西的诸语词。我们将恰当地称这些语词为真正的名称。</p></blockquote><p>这里引用了罗素的一个经典论证。维特根斯坦驳斥了这点，并且指出：<strong>意义就是用法</strong>。</p><blockquote><p>首先，让我们谈论一下这个思路的那个要点：如果没有任何东西与一个语词对应，那么它就没有任何意义。——确定如下之点是重要的：如果人们用“意义”这个词来表示“对应”于一个词的那个东西，那么它便被以违犯语言规则的方式加以使用了。这也就是说，一个名称的意义被混同于这个名称的承受者了。假定某某先生死了，那么人们说，这个名称的承受者死了，而不说这个名称的意义死了。这样说没有任何意义，因为如果这个名称不再具有意义，那么“某某先生死了”这种说法也恰恰不具有意义了。</p></blockquote><p>由于篇幅限制，这一篇就到此为止了，有空我会再讨论实指定义等内容。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://sora.ink/archives/1484<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><em>Intuitionistic Type Theory</em>, P Martin-Löf.<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><em>Tractatus Logico-Philosophicus</em>, Wittgenstein., 2.02<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;构造逻辑的解释请移步：&lt;a href=&quot;https://sora.ink/a</summary>
      
    
    
    
    
    <category term="philosophy thoughts" scheme="https://lasmgratel.github.io/tags/philosophy-thoughts/"/>
    
  </entry>
  
  <entry>
    <title>2022-09-25 杂谈</title>
    <link href="https://lasmgratel.github.io/2022/09/25/2022-09-25/"/>
    <id>https://lasmgratel.github.io/2022/09/25/2022-09-25/</id>
    <published>2022-09-25T12:26:28.000Z</published>
    <updated>2022-10-19T03:41:50.168Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一篇杂谈的前言：</span><br><span class="line">由于我整理不出来一个完整的思想体系（亦或没有这种必要），以后有什么想法我会先写下来发到博客上，作为参考和备份。</span><br></pre></td></tr></table></figure><h1 id="对“rust-是从语法上规避了-gc”的回复"><a href="#对“rust-是从语法上规避了-gc”的回复" class="headerlink" title="对“rust 是从语法上规避了 gc”的回复"></a>对“rust 是从语法上规避了 gc”的回复</h1><blockquote><p>rust 是从语法上规避了 gc</p></blockquote><p>参考：<a href="https://doc.rust-lang.org/nomicon/ownership.html">https://doc.rust-lang.org/nomicon/ownership.html</a></p><p>Rust 是在规避 GC，但其理由在于：如果我们能引入一种机制，使得我们能通过语法分析便可以回收堆上内存（如 String，Rust struct 等），那么就可以规避 GC。所以 Rust 引入了生命周期，所有权的概念。</p><p>要注意一点：<strong>生命周期，所有权等概念只在编译期有效。</strong> 当编译之后，在其生命周期的末尾会将其 drop 掉。</p><p>这有点像传统的栈上内存：先入后出。最先入栈的最后出栈，最先分配内存的最后 drop。</p><p>程序逻辑上并不会这么单线条，共享引用，循环引用等问题仍会发生。另一种常见的情况是你实在受不了一大堆生命周期标注，这时候就需要 reference-counter 来解决。</p><p><em>你有没有考虑过 reference-counter 就是一种 GC？</em></p><p>社区实现了另一种常见的 GC：<a href="https://github.com/Manishearth/rust-gc">Mark and sweep GC</a>。在 Java 1.7 及之前使用的默认 GC 也是这个算法（CMS）。</p><p>所以 Rust 在语法上确实尽量规避 GC，但由于程序本身的特性（或考虑到各种抽象开至），GC 仍然存在。</p><h1 id="关于如何缓存图片"><a href="#关于如何缓存图片" class="headerlink" title="关于如何缓存图片"></a>关于如何缓存图片</h1><p>首先，对于能通过 ID 对应的图片缓存才有意义，如果图片只有个 ETag 那缓存就是浏览器的工作，如果连 ETag 都没有那说明这个东西就不应该缓存。</p><p>需要缓存的图片可以分三类进行处理，我分别起了三个名字：</p><ol><li>Hash 式：这类图片完全不会改动，并且已知固定链接，例如<a href="https://www.bungie.net/common/destiny2_content/screenshots/3886416794.jpg">命运 2 的一个武器截图</a>。这种情况下可以一次性缓存并用 ID 对应，不需要做其他处理。</li><li>API 式（Gravatar）式：这类图片有一个固定的链接，但图片可能会发生更新。我们通过向服务器发送带有 <code>If-None-Match</code> 或 <code>If-Modified-Since</code> 请求头的请求，判断返回码为 200（有变动）或 304 Not Modified 来更新并验证缓存。</li><li>Steam 社区式：例如 Steam 某游戏的商店页的第 x 张截图，这类图片有一个乱七八糟的 URL 不好找到对应关系，图片也有可能变动，我们先将这个图片的缓存返回给用户，同时后台创建一个背景任务比较并更新。这样可以得到最佳的用户体验，同时也能保证时效性。</li></ol><p>同时图片的修改日期也应当缓存，可以删除 6 个月或 1 年以上未使用的图片来节省空间。</p><h1 id="哲学问题"><a href="#哲学问题" class="headerlink" title="哲学问题"></a>哲学问题</h1><blockquote><p>非 A，还是 A 的非？</p></blockquote><p>我要保护环境，燃烧秸秆是污染环境，我为了不污染环境我就禁止燃烧秸秆</p><p>我要离开二中，二中搞了 xxx 规定，我只要跟 xxx 反其道而行之我就是离开二中</p><p>独裁就是自己拿意见，所以只要不是自己拿意见我就是民主</p><h2 id="关于自责"><a href="#关于自责" class="headerlink" title="关于自责"></a>关于自责</h2><p>自责的要求，是在别人面前表现自责的态度，还是自己内心反省？</p><p>前者是一种表现，后者是一种自残。</p><p>当你在提到前者的时候，你把“我”作为了一个符号来批判，这个时候的“我”是之前的我。</p><p>后者则是批判“我”的整体集合。</p><p>LG 在这里觉得这两种符号上的区别（或分不清区别）是导致人们自我怀疑自我否定的罪魁祸首。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
    <category term="miscellaneous" scheme="https://lasmgratel.github.io/tags/miscellaneous/"/>
    
  </entry>
  
  <entry>
    <title>Java Generic Sucks</title>
    <link href="https://lasmgratel.github.io/2022/06/22/java-generic-sucks/"/>
    <id>https://lasmgratel.github.io/2022/06/22/java-generic-sucks/</id>
    <published>2022-06-21T16:07:56.000Z</published>
    <updated>2022-06-21T16:31:32.002Z</updated>
    
    <content type="html"><![CDATA[<p>Java’s generics type erasure has been regarded as a failure design since JDK 1.5, but I haven’t realized it until today when I run into a serious issue about it.</p><h2 id="The-issue"><a href="#The-issue" class="headerlink" title="The issue"></a>The issue</h2><p>I’m using <a href="https://github.com/TheElectronWill/night-config">night-config</a> library to parse TOML config file for my program. I parsed and stored a list of <code>long</code> from TOML. Right after I got my program up and running, I noticed that <code>list.contains(x)</code> failures at random numbers. Those numbers seem to exist in the list and successfully printed out, but I cannot locate the issue based on the information I got.</p><p>So I read the TOML parser it self, trying to locate where it handles Integer/Long parsing and found the function that deal with number parsing:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/TheElectronWill/night-config/blob/master/toml/src/main/java/com/electronwill/nightconfig/toml/ValueParser.java#L76</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Number <span class="title">parseNumber</span><span class="params">(CharsWrapper valueChars)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">long</span> longValue;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        longValue = Utils.parseLong(numberChars, base);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParsingException(<span class="string">&quot;Invalid integer value: &quot;</span> + valueChars);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> intValue = (<span class="keyword">int</span>)longValue;</span><br><span class="line">    <span class="keyword">if</span> (intValue == longValue) &#123;</span><br><span class="line">        <span class="keyword">return</span> intValue;<span class="comment">// returns an int if it is enough to represent the value correctly</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> longValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that: <code>returns an int if it is enough to represent the value correctly</code></p><p>So the output list, assumptively <code>ArrayList&lt;Long&gt;</code> typed, does consist <strong>both</strong> Integer and Long <em>if Integer is enought to represent the value</em>, calling <code>List.contains</code> will certainly fail if you pass a long parameter to check whether <strong>the number, which is actually int</strong>, is in the collection.</p><p>Having it double-checked by using fastutil’s LongArrayList confirmed my thoughts, it fails to construct because there are int values in a marked <code>ArrayList&lt;Long&gt;</code> collection.</p><h2 id="Why-blame-Java’s-generic-design"><a href="#Why-blame-Java’s-generic-design" class="headerlink" title="Why blame Java’s generic design?"></a>Why blame Java’s generic design?</h2><p>In this case, <code>ArrayList&lt;Long&gt;</code> is merely a mark that give instructions for compiler to check, but it does not replace the <code>Object[]</code> array in the list, nor does it assert runtime type-checking. The issue may absolutely be avoided or easily solved in C#, Rust and other strong-typed generics language.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Always use strong-typed fastutil or trove collections for storing primitive values.</p><p>Blame Java for it’s bad design.</p><p>In this case, cast boxed int or long values to Number and cast it back to Long, then store them in a <code>LongArrayList</code>.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java’s generics type erasure has been regarded as a failure design since JDK 1.5, but I haven’t realized it until today when I run into a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lasmgratel.github.io/2022/06/22/hello-world/"/>
    <id>https://lasmgratel.github.io/2022/06/22/hello-world/</id>
    <published>2022-06-21T16:06:29.318Z</published>
    <updated>2022-11-04T13:24:11.830Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Hello World 是 Hexo 的默认页面，是所有编程语言中的一个开始。<del>反正这里也没有太多人看吧，</del>毕竟一般都在最下面，最古老的地方。所以，稍微讲讲发博客的理由。</p><p>很早就有写博客的冲动了，当初是搜索到有“免费空间”这么一个东西，也就是空间站，在那里部署了第一个 WordPress。之后很多次都有部署过，但是可能写了很多，又删掉了，或者没有发出来。</p><p>在数次思想变化和成长中，每一年都认为自己去年的想法很幼稚，每一天都认为自己前一天的想法很无脑。<strong>但其实这些事情又有什么所谓呢？我们本身都是自己的历史，否定自己的过去，不就是否定自己了吗？</strong></p><p>不满足于只是 QQ 上交流，而是想把想法记录下来，有的时候也方便说明“这之前讨论过了啊”。俗话说“好记性不如烂笔头”。个人博客其实也是对这种生活中冥想的一种总结整理，在总结的基础上也能找到头脑风暴中犯的一些错误。当然我知道我最大的问题就是文笔不好，看起来并不畅快，懵懵懂懂的，也欢迎读者给出改进建议。</p><p>希望未来的自己，或者是看到这一篇有同感的人，或是一个路人，看到这些话语也不要觉得幼稚与无病呻吟了吧。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Hello World 是 Hexo 的默认页面，是所有编程语言中的一个开始</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>追梦</title>
    <link href="https://lasmgratel.github.io/2021/11/22/self/"/>
    <id>https://lasmgratel.github.io/2021/11/22/self/</id>
    <published>2021-11-22T11:34:05.000Z</published>
    <updated>2022-11-17T08:52:07.896Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一种现象"><a href="#一种现象" class="headerlink" title="一种现象"></a>一种现象</h2><p>昨天群友突然提到了几年前的一次 brainstorm 以及当时的憧憬，有感而发。</p><p>首先说结果肯定又是没做，但是真的给了我一些思考。<strong>我们放弃的并不是理想，而是“去思考自己的理想”这么一种过程。</strong></p><p>“既然我每次都实现不了，那下一次还是实现不了吧。”这大概是一种创伤后应激，你的奋斗换来的不是成果，也没有人支持你，最后胎死腹中可能还被人笑几句，我相信大部分人都受不了这种打击，于是选择封闭了这种想法。</p><p>因为这种创伤，我们选择了逃避，选择随波逐流，将其合理化，认为这是“成长的一个过程”。</p><h2 id="一部作品"><a href="#一部作品" class="headerlink" title="一部作品"></a>一部作品</h2><p>2012 年的番剧《さくら荘のペットな彼女》（樱花庄的宠物女孩）。引入了一个很好的主题：<strong>天才就在你身边的时候，你的理想有意义吗？</strong></p><p>这部剧不能从其表面来看，显然它是一部标准的日式高中校园恋爱<del>后空翻</del>后宫番，但这个主题才是真正贯穿全剧或原小说全集的内涵。我们复习一遍，空太遇到了天降女神椎名真白，但是<strong>一个普通到不能再普通的普通人在天才面前感受到了巨大的差距</strong>。同样的，仁也感受到了与美咲间的巨大差距。这是故事中大部分矛盾的根源。</p><h2 id="你提这个干嘛？"><a href="#你提这个干嘛？" class="headerlink" title="你提这个干嘛？"></a>你提这个干嘛？</h2><p>实际上这是我的灵感来源，去年也有人就此发表过文章：<a href="https://zhuanlan.zhihu.com/p/156058447">逃离“樱花庄”：我们每个人，都是空太</a>。这篇文章想表达资本主义对人的异化，以及对共产主义社会和人性解放的向往。</p><p>我对这种观点进行一些补充。实际上，不要把理想看的那么崇高。理想也是你的一种需求，一种欲望，你想得到一个远大目标实现后的满足感。</p><blockquote><p>每一个中国青年，从出生的那一刻起，都毋庸置疑的认为自己是天选之子，将来是要改变世界的。而当逐渐的发现，自己并没有成为天选之子的时候，便产生了巨大的落差，<strong>所谓的佛系青年，在中国是不存在的，他们虽然表面谦逊佛系，但实际内心把自己所称的一时佛系当成是隐士大丈夫能屈能伸的必要隐忍，是君子伺机而动的代言，一旦真的有什么机会，他们会立刻豁出性命</strong>，就比如虽然嘴上臭骂 996，但实际却自己主动加班的不在少数。</p></blockquote><blockquote><p>因此，在这样的一种认识下，也就很难实现自我反思和纠偏，在孤傲和自负中，一切的矛盾被归结为时运、时命，是暂时的挫折与失败，相比于反思，青年们对勇于面对挫折，抗击挫折的论调更加喜好。然而，<strong>如果不进行反思纠偏，矛盾就会周期性、重复性出现</strong>。正如前文所言，缺点不是人与他者的对立，而是人的认知与客观规律的对立，不是偶然的而是一种必然，只是其结果以一种具体的形式表现在了他者的反馈上，称之为缺点。因此，部分人所主张的只要逃避，忽视他人看法，退到自己的世界里，问题就不存在的观点是一纸荒唐言，这样的做法仅能做到心理安慰，但却改变不了这种对立所引发的矛盾周期性重复问题。</p></blockquote><p>当代青年遇到的是什么根本问题呢？是急于找到或提升自己在这个社会上的位置。很多矛盾也就归因于此了。</p><h3 id="然而你真的想清楚了吗？这个根本问题真的是你需要解决的吗？"><a href="#然而你真的想清楚了吗？这个根本问题真的是你需要解决的吗？" class="headerlink" title="然而你真的想清楚了吗？这个根本问题真的是你需要解决的吗？"></a><strong>然而你真的想清楚了吗？这个根本问题真的是你需要解决的吗？</strong></h3><p>一部分读者可能已经明白了，给另一部分读者一些提示：<strong>“找准你自己的定位”是不是社会强加给你的一种概念呢？</strong></p><p>很显然，它是社会强加给青年的一个按部就班的思路。</p><p>小时候我们学习为了考初中，高中，考大学，大学考研，为了找好工作。这个过程是“找清自我定位”中之 - 自己的<del>内卷</del>学习能力。工作换了几家，最终稳定下来，此为找到收入定位。最终你进入了按部就班的人生，盖上了盖送进了火葬场。</p><p><strong>这就是对人的异化啊！在这个过程中我们从来就没有想过，“我要干什么”，“我是为了什么”</strong>。想到却解决不了这些问题的人选择了逃避，啃老摆烂。</p><p>那么为什么我们遵循了这样一种循规蹈矩的生活呢？回到最开始提的现象，理想的成功率很低，我们选择了自我封闭。而循规蹈矩的生活成功率很高，我们选择使用给定的道路。</p><p>追逐理想的路上没有反馈可言，<strong>因为这是你自己的道路，你无法跟任何人进行比较</strong>。热衷于内卷的年轻人可是有明确的比较目标的。《樱花庄》剧中的男主空太也有自己做游戏策划的理想，但是没有正向激励，而且选择性只看到了别人的成功，没有看到别人的失败或别人的努力，陷入消沉。但在众人的支持下，还是能明确自己的目标一路奋进。我们就没有那么幸运了。<strong>别说鼓励，我们大部分人可能遭到的更多是冷漠，甚至嘲讽。在如此巨大的心理压力下，正常人都是无法坚持的</strong>。这样的压抑真的是难以言说的，简直就像是全世界都在劝你放弃。</p><h2 id="造成压力的原因"><a href="#造成压力的原因" class="headerlink" title="造成压力的原因"></a>造成压力的原因</h2><p>这就又要说到独立性与同一性了。<strong>个体的我们接受了“理想总是失败的”“循规蹈矩是最好的选择”这样的想法</strong>，对自己而言首先开始自我否定，对外的表现就是“洗心革面”。在群体角度上，大家都秉持了这样的想法，就开始<strong>排他，开始不自主的对理想谈论者产生负面想象</strong>，甚至恶意的将他们与说空话大话的人归为一类。久而久之形成了相互影响的趋势。</p><p>这是对于普通人来说。而对于那些相对成功者来说，他们的鼓励更会带给人无形的压力——“你说的如此轻松！”如同剧中互相喜欢的空太和真白，空太会因为真白的鼓励而生气。你的大脑不能进行多维度分析，只能进行单维度分析，不同的人不同的价值在同一时刻没办法全部表现。男主在前期想要搬离也变得容易理解了，因为他在樱花庄受到的打击远比在学校中大，而不仅仅因为“这些人很怪”。</p><p>社会也不具有一个 general-purpose 的对努力的鼓励和奖励机制，一切以结果为导向，结果就是经典的“努力无用论”。</p><p>人们对他人理想的否定也带有矛盾在其中：一种是自私，即不希望别人过好，突破同样的圈子，衬托出自己的失败；另一种是慈悲，因为自己受到了打击，所以不希望别人受到同样的打击。这种矛盾是对立统一的，通过<strong>对进步</strong>的打压，形成了一个稳定的群体。</p><h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><p><em>(2021.11.23 更新)</em></p><p>有没有解决之道呢？带领群体进步是上策，但对于个人来说显然困难不小。另一种是，真正找到大家的共性方面，不仅只是趣味相同。</p><p>在跟别人的探讨中，我提出对“和而不同，同而不和”的一种理解：<strong>人与人之间的相处要靠三观</strong>。一种解释方法是把人们的三观看成一种对于人的自我价值，以及周围价值的<strong>基于人本身特质的加权认定算法</strong>。</p><p>这里的特质指性格，能力，价值观等。</p><p><strong>加权算法</strong>的举例分析：</p><ul><li><p>现象：两个人因为有相同/相似的特质而形成共识</p><p>本质：两个人对某个或某些特质的权重相同</p><p>假设两个人拥有同一个特质的不同程度，例如一个钢琴初学者和钢琴大师，如果两人都把钢琴作为重要的部分，两人会有共同语言。</p></li><li><p>现象：一个人身上有这样的特质，而一个人欣赏这样的特质，两人形成共识</p><p>本质：仍然是权重相同</p><p>反例：一个厌恶弹钢琴的钢琴大师，和一个欣赏钢琴曲的普通人，会出现摩擦和矛盾</p></li><li><p>现象：两个人认为 A 同等重要，但一个人认为跟 A 比起来 B 更重要，另一个人认为跟 A 比起来 C 更重要，虽然前者的 C 比后者强，两人仍然出现矛盾</p><p>本质：加权算法不同。前者的加权算法可以假设为<code>80%B + 60%A + 50%C</code>，后者的加权算法可以假设为<code>80%C + 60%A + 50%B</code>，无论算法的结果如何，这套算法不同，就会出现认定矛盾</p></li></ul><p>从这套理论分析来看，结果如何是根本不重要的！重要的是你对某事的重视程度如何。而我们追求的也不是绝对的“自我价值实现”，而是在旁人眼里你的自我价值的重要程度（权重）。你在一件事上做的不够好，在别人眼里它的权重是 200%，认为你做得足够好了；你在一件事上做的不够好，别人眼中它的权重是 10%，无论如何都不会得到夸奖。</p><p>当然，如果说你得出了“取悦别人”的结论，那就大错特错了。取悦别人不会满足你自己的情绪需求，而理想，信念，这都是自己的情绪需求，是欺骗所不能得到的。要找到肯定你的人，欣赏你的人与你为伴，或是解构矛盾的自己。</p><p><strong>所谓的大同社会，无非是找到一套所谓“正确”的三观强加给所有人罢了</strong>。这个后现代的社会已然离散化，小圈子化至今，要想正确的分析这些观念，改造或是延申自己的想法，就必须了解共性。当你了解自己的某些决定背后的个人原因和社会原因后，假如前提被推翻，那么就勇敢地改变自己的想法；假如前提依然成立，那么就真诚的接纳自己。我虽然也不能摆脱迷茫，但至少这是我认为的一种正确的方向。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;一种现象&quot;&gt;&lt;a href=&quot;#一种现象&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="thoughts" scheme="https://lasmgratel.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>一件小事说起，谈谈游戏的那些“升级”策略</title>
    <link href="https://lasmgratel.github.io/2021/11/22/from-a-little-thing/"/>
    <id>https://lasmgratel.github.io/2021/11/22/from-a-little-thing/</id>
    <published>2021-11-22T11:12:16.000Z</published>
    <updated>2022-11-04T13:24:07.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本来在<a href="https://zhuanlan.zhihu.com/p/399605196">知乎</a>上发过了，想了想在这里再发一遍，万一没了呢。<del>当然我又改了改</del></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>“升级”还是“不升级”，这是一个值得考虑的问题。<del>–L 姆雷特</del></p></blockquote><p>某个聊天记录截图中某人攻击了 Minecraft 1.7.10 Mod 的开发和维护群体，给了我一点启示。</p><p>在之前我也认为维护旧版本或者给旧版本增添新内容是个不可理喻的行为。在长期的分析和信息搜集后，我认为有几条开发者考量的因素（至少他们声称是这样）：</p><ol><li><p>新版本拥有更好的优化（如地图生成，网络通信上的优化）</p></li><li><p>新版本的底层引入了更多的机制，可以在此基础上实现更多功能</p></li><li><p>大部分玩家只玩一两个 mod，重度整合玩家是少数，所以迁移成本低</p></li></ol><p>下面我们来一条一条分析。</p><ol><li><p>新版本只在 Java 新版本上进行了兼容或升级，但这主要是 Forge 的“功劳”，且 Forge 在 1.17 之前一直不官方声明推荐使用 Java 11。地图生成被抽象成了各种 Features，可是生成速度更慢了。原版的地图加载变得更慢，Enigmatica 6 的世界生成速度甚至不如 GTNH，经常造成假死。而网络通信上，Forge 进行了超级大改造，让开发门槛变得更高，服务端与本地端的兼容更加困难，经常需要完整同步所有文件才能解决 mismatch 问题。渲染上掉帧现象普遍，Sodium 告诉了我们什么是真正的渲染引擎。</p></li><li><p>Mod 要实现的新内容很大程度上并不版本依赖，你能说 IE 的多方块机器借鉴或直接使用了 MC 的什么新机制吗，都是旧有的 Block，TileEntity。你甚至可以在远古版本实现一个 IE。对于现在的 Mod 来说没有什么是不可能的。</p></li><li><p>这是某些 Modder 的一厢情愿，请自行查阅 CurseForge 上各类轻重度整合包的下载量。<strong>GTNH 是很火的。</strong></p></li></ol><p>综上所述我认为这些理由站不住脚，不构成 Mod 进行大版本迁移的充分条件。笔者认为 Mod 进行大版本迁移有两种原因：</p><ol><li><p>习惯：升级到最新版是一种强迫症。</p></li><li><p>风气：当一个 Mod 尤其是大型 Mod 进行版本升级后，它的附属和联动 Mod 就会被玩家或整合包作者催着升级。</p></li></ol><p>其实就是这么个简单的逻辑，再加上上面那些可有可无的理由。然而<strong>升级是苦痛的</strong>，每个大版本都要换一次 mapping，至少要修好几天 bug，并且适应新的结构（尽管它们实现的功能完全一样或者就是改个名字）。在这一过程中程序员很少能体验到价值实现，心情不会太好。在以前版本的经验这个版本也都要寻求其他方法实现。</p><p>这就引出了不升级的原因。那就是<strong>我当前这个版本还没优化好，为什么我要升级？</strong>或者我只是想简单加个功能，慢慢慢慢再完善。这些灵感有时候就是会 slip away，如果你忙于升级的话你的大脑不会给你提供这些灵感。我并没有可靠证据，但事实说明一切。Reika 还是不断在更新，GTNH 还是不断在更新。他们都能不断实现更多玩法和功能，RoC 就有大变样。</p><p>那些选择升级的呢？MC 最近发布了一连串新版本，Forge 也进行了一连串大改。我相信大部分 Modder 都和我一样在迁移的路上身心俱疲。从结果来看也是这样。主流 Mod 如 IE，AE2，RefinedStorage 根本没有内容上的突破创新，只进行了材质的换皮。CoFH 系甚至退步了，只有 Mekanism 发展了核裂变线（也不完善）。我们可以看到 Fabric 欣欣向荣，然而只是在尝试打磨和消化旧有的玩法，并且优化性能或者仅仅是代码更漂亮。对于 Modder 来说，时间是宝贵的，大部分人只是作为一个 part-time job 来做这些事情。久而久之，很多经典 Mod 就跟不上了，我相信大家都知道例子。这就是一种 keep-up 的升级。</p><p>这一现象并不孤立存在于 Minecraft Mod 之中，Minecraft 本身也陷入了这样的困境。我现在笑称 Minecraft 是个 RPG 游戏了，一堆为 RPG 地图服务的改动，数据包，function，在 Mojang 本就拉垮的架构能力大笔一挥下加入了更大的屎山。Modder 都不知道自己怎么加一个地牢 Loot 了。</p><blockquote><p>Minecraft 难道是个 RPG 游戏吗？</p></blockquote><p>Minecraft 本身就是在玩法上的创新起家的。最早它扩展了沙盒游戏的玩法，拥有更少的限制和更多的创造性。地狱更新，红石更新，末地更新，冒险更新，都让这个游戏的流程越来越多，可玩性越来越高。在 1.7 之后 Minecraft 已经和 Mod 密不可分了，它们作为一个整体共同进步。然而在 1.14 我认为 Mojang 选择了错误的路线，它不知道 Minecraft 要往何处去，于是进行了材质翻新，并且加入了大量冒险内容的扩充。要我说，材质翻新是走的最臭的一步棋，它强制改变了游戏的整体风格，并且 Modder 抽了风的一样也升级了材质，使得老玩家对于新版本的不熟悉和不信任感飙升。</p><p>（此处一定会有 n 多人反驳我说你怎么代表老玩家我怎么觉得材质好看，你开心就好，我说了是我的个人观点）这代表着 Minecraft 的一个重大的转变：Minecraft 本身去发展冒险内容，言下之意是，你们 Mod 去搞其他东西。可是冒险内容上的更新会很频繁，而 Mod 的创新速度正如前言是肯定跟不上的。“自大的更换材质”是一种对自己认识不清的一部分，因为不清楚自己的发展路线所以在盲目的更新。也同时暴露出，Mojang 根本不知道自己想干什么了。</p><p>要想理解为什么我说这是 Minecraft 走上下坡路的一个重要转折点，我们来看看其他游戏是怎样的。</p><h2 id="来看看其他游戏吧"><a href="#来看看其他游戏吧" class="headerlink" title="来看看其他游戏吧"></a>来看看其他游戏吧</h2><ol><li><p>Paradox Interactive（P 社）游戏。使用 Clausewitz 引擎的所有游戏都受限于这个引擎几百年的祖传单核，拉垮机能和狗屎一样的脚本。P 社选择了卖各种 DLC 吞 Mod 的发展方向。游戏后期的玩法因为太卡而基本无法被开发，各种机能受限，许多简化操作的关键命令不实现。这些都是搁置了很多年的问题。最后只能靠推出一代一代新游戏来解决，但人生又有几个十年？而且拿走的都是特别精华的灵感。</p></li><li><p>暴雪。暴雪属于是一把好牌玩成臭狗屎的典型。魔兽争霸，星际争霸，在编辑器事件上走到了玩家的对立面。各种“教你玩游戏”，知乎有很多其他相关文章，此处不再赘述。</p></li><li><p>R6。这砍一刀，那砍一刀，逻辑只有出场率和胜率，那你要干员干嘛，全部小叮当得了。</p></li><li><p>命运 2。这砍一刀，那砍一刀，退环境，那你还接着出新内容干嘛，重新发布一遍游戏不就完了。</p></li></ol><p>这些都是明眼看着走下坡路的游戏，他们的共同特点就是游戏核心玩法上没有创新，没有进步，不思进取，而且不接受在这上的 Modding，一旦凉凉就会成为鬼服游戏。</p><p>暴雪本来坐拥最大的 MMORPG（魔兽世界）和 RTS 群体，守望先锋和炉石传说也非常火爆，可是在游戏发布没多久就直接用完了灵感，进入摆烂模式，推出日复一日的换皮活动和年复一年的换色皮肤。要我说那么宏大的世界观都喂狗了，包袱回收还不如网红爽文，更别提郭德纲于谦了。</p><p>Minecraft 有一个巨大优势在于可以进行完全的，简单的 Modding，这是这些游戏所没有的。但是 Mod 社区终究是脆弱的，需要仔细考量和保护的。StarCraft 1.08b 的那些 EUD 玩法被暴雪一刀砍没了，现在又想通过模拟器加回来，然而以前那些大牛们早已不在了。所以其实这些决定真的只在一念间。</p><p>要我说啊，Minecraft 现在最大的突破口就是怎样实现虚拟世界中才能实现的想法，点子，进而组成无穷可能的 MMORPG 世界，<strong>书写千万篇玩家们共同谱写的故事，而不是在单机自闭</strong>。（当然你要能写出真 AI 也行）</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;本来在&lt;a href=&quot;https://zhuanlan.zhihu.com</summary>
      
    
    
    
    
    <category term="thoughts" scheme="https://lasmgratel.github.io/tags/thoughts/"/>
    
    <category term="minecraft" scheme="https://lasmgratel.github.io/tags/minecraft/"/>
    
  </entry>
  
  <entry>
    <title>Minecraft performance tuning and more</title>
    <link href="https://lasmgratel.github.io/2021/11/22/minecraft-performance-and-more/"/>
    <id>https://lasmgratel.github.io/2021/11/22/minecraft-performance-and-more/</id>
    <published>2021-11-22T10:44:10.000Z</published>
    <updated>2022-11-17T09:53:55.409Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>多年的 Minecraft 服务器运维经验可以整理一下了，当然也讲点别的。</p><p>本文内容针对 Forge 1.12.2 版本，其他 Minecraft 版本同理但有所出入</p><p>Minecraft 服务器的性能主要有三个大开销，下面分别来讲讲三个部分以及它们的优化策略。</p><ol><li><p>TileEntity Tick</p><p><em>Tick 的实现可以在 <code>WorldServer#tick</code> 找到。</em></p><p>众所周知的开销大户，在一个大型整合包的中后期档中占用了主要部分。可以使用 <code>/forge track start tileentity 10</code> <code>/forge track tileentity</code> 来统计十秒内的 TileEntity tick 时间占用。找到对性能影响最大的几个方块拆除之。</p><p>常见情况：匠魂冶炼炉满了造成的巨幅卡顿，Ender IO 机器的 <em>输入/输出</em> 面放了一个容器。</p><p>当然更常见的情况是人多了，机器多了，虽然每个只占用 1ms，但是积攒起来还是很容易达到 50ms (20 TPS) 的上限。这个时候可能需要和玩家沟通，把生产线拆除甚至换成创造箱子等。如果服务器玩家组分时段上线，也可以考虑限制或禁止区块强制加载。</p></li><li><p>Entities Tick</p><p>实体的情况比较复杂。玩家身上穿了过多能与世界交互的装备（如吸铁石）就会造成卡顿，同样需要与这些玩家进行沟通。其他情况下一般需要清理掉落物品，减少刷怪，安装 AIImprovements 模组，在后期档直接开启和平模式等。实体可能只占用 10ms 的 Tick 时间，但是聊胜于无吧。</p></li><li><p>World Generation</p><p>跑图卡顿，在 1.13 之前的单线程世界生成所存在的问题。考虑删除 BOP，RTG 等大量修改世界生成的模组。</p></li><li><p>其他部分</p><ul><li><p>虽然 Minecraft 采用了先进的 Netty 异步网络数据处理方式，但是仍然可能发生从网络线程引入的卡顿。典型的情况是一个超大型 <em>应用能源</em> 网络，打开终端之后会因为处理，发送，接收大量数据而造成卡顿。一个带有特殊渲染模型的多方块结构也可能发生这种现象，因为要实时获取多方块机器数据。这种情况下考虑开启 BBR 算法，AE 拆分子网络等。</p></li><li><p>JVM 调优可以直接使用 <a href="https://cyberdynecc.github.io/Thermos/install">Thermos</a> 给出的参数：<code>java -XX:+UseG1GC -XX:+UseFastAccessorMethods -XX:+OptimizeStringConcat -XX:MetaspaceSize=1024m -XX:MaxMetaspaceSize=2048m -XX:+AggressiveOpts -XX:MaxGCPauseMillis=10 -XX:+UseStringDeduplication -XX:hashCode=5 -Dfile.encoding=UTF-8</code></p></li><li><p>推荐使用 HotSpot JVM 而不是奇奇怪怪的各种 JVM，你不知道这些模组会用到什么奇怪的黑科技。</p></li><li><p><strong>不要使用洋垃圾 Xeon 开服！</strong></p></li></ul></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我们很少探索过大型整合包的后期档，很少探索大型 Mod 整合包带来的科技魅力，便是因为后期的性能问题。倘若能在性能和复杂的生产线之间做出很好的平衡，也许我们就可以欣赏到 Minecraft 中那种创造的魅力。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"ed7172474a1e3c34da82","clientSecret":"337771537062da97167e0359f070abefe3dd8f9b","repo":"lasmgratel.github.io","owner":"LasmGratel","admin":["LasmGratel"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;多年的 Minecraft 服务器运维经验可以整理一下了，当然也讲点别的。&lt;</summary>
      
    
    
    
    
    <category term="minecraft" scheme="https://lasmgratel.github.io/tags/minecraft/"/>
    
  </entry>
  
</feed>
